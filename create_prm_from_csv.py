import fileinput
import sys
import subprocess
import os
from pathlib import Path
import warnings

# You have to adapt the following paths for your system
# maindir is the absolute path to this script and the location where the csv-file is located
maindir = str(Path(__file__).resolve().parent)
# prm_output_dir points to the location where the prm file shall be placed e.g. where your main code is located
prm_output_dir = str(Path(__file__).resolve().parent.parent)+'/MA-Code/'

# The file that was just creatd by the macro was named as follows and resides in the maindir
filename = maindir+'/Parameters.csv'

# Read content from csv file
list_of_lists = []
with open(filename) as f:
    for line in f:
        inner_list = [elt.strip() for elt in line.split(';')]
        # in alternative, if you need to use the file content as numbers
        # inner_list = [int(elt.strip()) for elt in line.split(',')]
        list_of_lists.append(inner_list)

# Determine the active column marked by "x"
safety_counter = 0
active_column = 1 # initial value
found_column = False
for line in list_of_lists:
    safety_counter = safety_counter +1
    if ( '#export' in line[0] ):
        nbr_columns = len(line)-1
        for column in range(1,nbr_columns+1): # The hated "+1" to also run over the last entry
            if ( 'x' in line[column] ):
                active_column = column
                found_column = True
                break # leaves the inner for loop
    if ( safety_counter > 5 ):
        warnings.warn("Warning: Could not yet find the '#export' flag to determine the active column.")
    if ( found_column ):
        break # leaves the outer for loop                 


# Find the legend text
safety_counter = 0
legend_text = ''
for line in list_of_lists:
    safety_counter = safety_counter +1
    if ( '# Legend' in line[0] ):
        prefix = line[0][10:len(line[0])]
        legend_text = prefix+line[active_column]
        break
    if ( safety_counter > 5 ):
        warnings.warn("Warning: Could not yet find the '# Legend' flag to determine the active column.")
         
# Write the parameter names and the active values into the prm file                      
start_writing = False
with open(prm_output_dir+"/Parameters.prm", 'w') as prm_file:
    prm_file.write('#-------- auto-generated by create_prm_from_csv.py ---------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#PARAMETERS --- '+legend_text+' \n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
                   
    for line in list_of_lists:
        # Look for the start of the parameters indicated by "##start"
        if ( '##start' in line[0] ):
            start_writing = True
        elif ( '##end' in line[0] ):
            break
        # If we've found the start, we can start writing the following parameters
        if ( start_writing ):
            if ( ('#subsection' in line[0]) or ('#end' in line[0]) ):
                prm_file.write(line[0][1:len(line[0])]+'\n')
            elif ( line[0][0:2] == '//' ): # Found a comment
                prm_file.write(' # '+line[0][3:len(line[0])]+'\n')
            elif ( line[0]=='' ): # replace an empty line by an empty line
                prm_file.write('\n')
            else: # standard parameters
                parameter_name = line[0]
                active_value = line[active_column]
                # Don't output the paramter, if there is no value to it (we want to use the default)
                if ( active_value != '' ):
                    # Replace all variants of boolean (e.g. FALSE, False, ...) by the C++ desired ones
                    if ( active_value.lower() in 'false' ):
                        active_value = 'false'
                    elif ( active_value.lower() in 'true' ):
                        active_value = 'true'
                    # Finally write the parameter with its value properly into the prm
                    prm_file.write("	set "+parameter_name+" = "+active_value+'\n')
            
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#PARAMETERS - END\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
    prm_file.write('#-----------------------------------------------------------------------\n')
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   